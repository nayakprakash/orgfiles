* Tidying data principles
1. inspect with str() or summary()
2. tidy the names, columns variables, use str_replace() or other dplyr functions
3. Date representations with lubridate
4. Deal with incorrect variable codings
5. Find, understand and deal with missing data
6. Identify and correct errors, outliers
* GGVIS                                   :ggvis:visualization:mappingvalues:
https://rpubs.com/imanojkumar/GGVIS1
http://ggvis.rstudio.com/ggvis-basics.html#layers
Make a scatterplot of the pressure dataset
pressure %>% ggvis(~temperature, ~pressure) %>% layer_points()

# Adapt the code you wrote for the first challenge: show bars instead of points
pressure %>% ggvis(~temperature, ~pressure) %>% layer_bars()

# Adapt the code you wrote for the first challenge: show lines instead of points
pressure %>% ggvis(~temperature, ~pressure) %>% layer_lines()

# Adapt the code you wrote for the first challenge: map the fill property to the temperature variable
pressure %>% ggvis(~temperature, ~pressure, fill = ~temperature) %>% layer_points()

# Extend the code you wrote for the previous challenge: map the size property to the pressure variable
pressure %>% ggvis(~temperature, ~pressure, fill = ~temperature, size
= ~pressure) %>% layer_points()
= (maps sign) sign is for data values 
:= (set sign) sign means a visual space value 

# Change the code to set the fills using pressure$black. pressure$black is loaded into workspace.
pressure %>% 
  ggvis(~temperature, ~pressure, 
        fill := ~black) %>% 
  layer_points()

# Plot the faithful data as described in the second instruction
faithful %>% 
  ggvis(~waiting, ~eruptions, 
        size = ~eruptions, opacity := 0.5, 
        fill := "blue", stroke := "black") %>% 
  layer_points()

# Plot the faithful data as described in the third instruction
faithful %>% 
  ggvis(~waiting, ~eruptions, 
        fillOpacity = ~eruptions, size = ~erutions,  
        fill := "red", stroke := "green") %>% 
  layer_points()
# change the third line of code to plot a map of Texas
library("maps")
texas <- ggplot2::map_data("state", region = "texas")
texas %>% ggvis(~long, ~lat) %>% layer_paths()

# Same plot, but set the fill property of the texas map to dark orange
texas %>% ggvis(~long, ~lat, fill:= "darkorange") %>% layer_paths()
<<<smooths>>>

# Use 'ggvis()' and 'layer_lines()' to plot the results of compute smooth
mtcars %>% compute_smooth(mpg ~ wt) %>% ggvis(~pred_, ~resp_) %>% layer_lines()

# Recreate the graph you coded above with 'ggvis()' and 'layer_smooths()' 
mtcars %>% ggvis(~wt, ~mpg) %>% layer_smooths()

# Extend the code for the second plot and add 'layer_points()' to the graph
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% layer_smooths()

Why do you map the binwidth instead of set it? You map a value
whenever you want the value to be interpreted in the units of the data
space. Here you want the binwidth to equal n units on the x axis. You
set a parameter whenever you want it to be interpreted in the units of
the graphics window, e.g., pixels, color names, and so on.
# Build a histogram of the waiting variable of the faithful data set.
faithful %>% ggvis(~waiting) %>% layer_histograms

# Build the same histogram, but with a binwidth (width argument) of 5 units
faithful %>% ggvis(~waiting) %>% layer_histograms(width 
* You can create multi-layered plots by adding additional layers to a graph with the %>% syntax.

If you set or map a property inside ggvis() it will be applied
globally , every layer in the graph will use the property. If you set
or map a property inside a layer_<marks>() function it will be applied
locally: only the layer created by the function will use the
property. Where applicable, local properties will override global
properties.
# Create a graph containing a scatterplot, a linear model and a smooth line. 
pressure %>% 
  ggvis(~temperature, ~pressure) %>%
  layer_lines(opacity := 0.5) %>%
  layer_points() %>%
  layer_model_predictions(model = "lm", stroke := "navy") %>%
  layer_smooths(stroke := "skyblue")

# Add a legend to the plot below: use the correct title and orientation
faithful %>% 
  ggvis(~waiting, ~eruptions, opacity := 0.6, 
        fill = ~factor(round(eruptions))) %>% 
  layer_points() %>% 
  add_legend("fill", title = "~ duration (m)", orient = "left")

# Use add_legend() to combine the legends in the plot below. Adjust its properties as instructed.
faithful %>% 
  ggvis(~waiting, ~eruptions, opacity := 0.6, 
        fill = ~factor(round(eruptions)), shape = ~factor(round(eruptions)), 
        size = ~round(eruptions)) %>% 
    layer_points() %>% 
    add_legend(c("fill", "shape", "size"), 
               title = "~ duration (m)", values = c(2, 3, 4, 5))
You can change the color scheme of a ggvis plot by adding a new scale to map a data set variable to fill colors. The first chunk of code on the right creates a new scale that will map the numeric disp variable to the fill property. The scale will create color output that ranges from red to yellow. Copy the code to console, run it and be amazed.

# ggvis provides several different functions for creating scales:

 scale_datetime(), scale_logical(), scale_nominal(), scale_numeric(), scale_singular(). Each maps a different type of data input to the visual properties that ggvis uses. For example, the first two challenges below require scale_numeric() because the code maps a numeric variable to a visual property.

# You can adjust any visual property in your graph with a scale (not just color). Let's look at another property that you may frequently want to adjust.

Often when you map a variable to opacity some data points will end up so transparent that they are hard to see, as in the first plot in the editor on the right.

Just as you can change the range of visual values that your scales
produce, you can also change the domain of data values that they
consider. For example, you can expand the domain of the x and y scales
to zoom out on your plot. The second plot on the right will expand the
y axis to cover data values from 0 to the largest y value in the data
set.

# Add a scale that limits the range of opacity from 0.2 to 1.
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl), opacity = ~hp) %>%
  layer_points() %>%
  scale_numeric("opacity", range = c(0.2, 1))

# Add a second scale that will expand the x axis to cover data values from 0 to 6.
mtcars %>% ggvis(~wt, ~mpg, fill = ~disp) %>%
  layer_points() %>%
  scale_numeric("y", domain = c(0, NA)) %>%
  scale_numeric("x", domain = c(0, 6))
* ggplot2
# The plot you created in the previous exercise
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point() +
  geom_smooth()

# Copy the above command but show only the smooth line
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_smooth()

# Copy the above command and assign the correct value to col in aes()
ggplot(diamonds, aes(x = carat, y = price, col = clarity)) +
  geom_smooth()

# Keep the color settings from previous command. Plot only the points
# with argument alpha.alpha is the transarency analogous to opacity
ggplot(diamonds, aes(x = carat, y = price, col = clarity)) +
  geom_point(alpha = 0.4)

# Create the object containing the data and aes layers: dia_plot
dia_plot <- ggplot(diamonds, aes(x = carat, y = price))

# Add a geom layer with + and geom_point()
dia_plot + geom_point()

# Add the same geom layer, but with aes() inside
dia_plot + geom_point(aes(col = clarity))
# Convert cyl to factor
mtcars$cyl <- as.factor(mtcars$cyl)

# Example from base R
plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
abline(lm(mpg ~ wt, data = mtcars), lty = 2)
lapply(mtcars$cyl, function(x) {
  abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)
  })
legend(x = 5, y = 33, legend = levels(mtcars$cyl), 
       col = 1:3, pch = 1, bty = "n")

# Add geom_point() to this command to create a scatter plot
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl))+
geom_point()

  
# Copy, paste and expand previous command to include the lines of the linear models, per cyl
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl))+
geom_point()+
geom_smooth(method = "lm", se = F)

# Copy, paste and expand previous command to include a lm for the entire dataset in its whole
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl))+
geom_point()+
geom_smooth(method = "lm", se = F)+
geom_smooth(aes(group= 1), linetype = 2,method = "lm", se = F)

* creating and analysing a tidy IRIS data set
We'll use two functions from the tidyr package:

gather() rearranges the data frame by specifying the columns that are categorical variables with a - notation. Complete the command. Notice that only one variable is categorical in iris.
separate() splits up the new key column, which contains the former
headers, according to .. The new column names "Part" and "Measure" are
given in a character vector. Don't forget the quotes.

# Load the tidyr package
library(tidyr)

# Fill in the ___ to produce to the correct iris.tidy dataset
iris.tidy <- iris %>%
  gather(key, Value, -Species) %>%
  separate(key, c("Part", "Measure"), "\\.") 


str(iris) 
... str(iris.wide) 
... str(iris.tidy)
'data.frame':	150 obs. of  5 variables:
 $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
 $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
 $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
 $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
'data.frame':	300 obs. of  4 variables:
 $ Species: Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Part   : chr  "Petal" "Petal" "Petal" "Petal" ...
 $ Length : num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
 $ Width  : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
'data.frame':	600 obs. of  4 variables:
 $ Species: Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Part   : chr  "Sepal" "Sepal" "Sepal" "Sepal" ...
 $ Measure: chr  "Length" "Length" "Length" "Length" ...
 $ Value  : num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
> # Consider the structure of iris, iris.wide and iris.tidy (in that order)
>     str(iris)
'data.frame':	150 obs. of  5 variables:
 $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
 $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
 $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
 $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
>     str(iris.wide)
'data.frame':	300 obs. of  4 variables:
 $ Species: Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Part   : chr  "Petal" "Petal" "Petal" "Petal" ...
 $ Length : num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
 $ Width  : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
>     str(iris.tidy)
'data.frame':	600 obs. of  4 variables:
 $ Species: Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Part   : chr  "Sepal" "Sepal" "Sepal" "Sepal" ...
 $ Measure: chr  "Length" "Length" "Length" "Length" ...
 $ Value  : num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
> 
> # Think about which dataset you would use to get the plot shown right
> # Fill in the ___ to produce the plot given to the right
> ggplot(iris.tidy, aes(x = Species, y = Value, col = Part)) +
  geom_jitter() +
  facet_grid(. ~ Measure)


* If Else ElseIf While and For and Break loops
remember to break a potentially infinite while loop
Using looping index with:  i in i in 1:length(cities)and cities[i] to
access the position of an object in a list or a vector.

* tidyr package and tidying data                                      :tidyr:
gather(df, key, value, -Col) makes the data frame vertically long
 # Gather the columns
> weather2 <- gather(weather, day, value, X1:X31, na.rm = TRUE)
> 
> # View the head
> head(weather2)
  X year month           measure day value
1 1 2014    12  Max.TemperatureF  X1    64
2 2 2014    12 Mean.TemperatureF  X1    52
3 3 2014    12  Min.TemperatureF  X1    39
4 4 2014    12    Max.Dew.PointF  X1    46
5 5 2014    12    MeanDew.PointF  X1    40
6 6 2014    12     Min.DewpointF  X1    26
spread(df, key, value, -Col) makes it widecensus_
as an example: long4 <- separate(census_long3, yr_month, c("year", "month"))
unite(df,country_iso, country, iso, sep = '_') and seperate deals with columns (Country_ISO etc) and seperates
them into seperate columns or brings them together, you need to
specify the seperator (_ in this case or / n other cases)
library(stringr)
library(lubridate)

# Remove X's from day column
weather3$day <- str_replace(weather3$day, "X", "")

# Unite the year, month, and day columns
weather4 <- unite(weather3, date, year, month, day, sep = "-")

# Convert date column to proper date format using stringr's ymd()
weather4$date <- ymd(weather4$date)

# Rearrange columns using dplyr's select()
weather5 <- select(weather4, date, Events, CloudCover:WindDirDegrees)

# View the head
head(weather5)

* lubridate                                                       :date:time:
ymd, mdy, hms, ymd_hms etc works on different time and date formats to
give us UTC and other universal formats to handle time and date
# Parse as date and time (with no seconds!)
mdy_hm("July 15, 2012 12:56")

# Coerce dob to a date (with no time)
students2$dob <- ymd(students2$dob)

# Coerce nurse_visit to a date and time
students2$nurse_visit <- ymd_hms(students2$nurse_visit)
    
* stringr                                                           :strings:
string_trim
string_pad
string_detect
string_replace
tolower
toupper
# Trim all leading and trailing whitespace
> c("   Filip ", "Nick  ", " Jonathan")
[1] "   Filip " "Nick  "    " Jonathan"
> str_trim(c("   Filip ", "Nick  ", " Jonathan"))
[1] "Filip"    "Nick"     "Jonathan"
> # Pad these strings with leading zeros
> c("23485W", "8823453Q", "994Z")
[1] "23485W"   "8823453Q" "994Z"    
> str_pad(c("23485W", "8823453Q", "994Z"), width=9, side="left", pad="0")
[1] "00023485W" "08823453Q" "00000994Z"
> sum(str_detect(students2$dob,"1997"))
[1] 89 In a neat step I know how many were born in 1997 from a string
character column of DOB

complete.cases(df) and na.omit(df) gives df without the rows having NA

* Missing Values                                            :missing:extreme:
# Count missing values
sum(is.na(weather6))

# Find missing values
summary(weather6)

# Find indices of NAs in Max.Gust.SpeedMPH
ind <- which(is.na(weather6$Max.Gust.SpeedMPH))

# Look at the full rows for records missing Max.Gust.SpeedMPH
weather6[ind, ]

# Review distibutions for all variables
summary(weather6)

# Find row with Max.Humidity of 1000
ind <- which(weather6$Max.Humidity == 1000)

# Look at the data for that day
weather6[ind, ]

# Change 1000 to 100
weather6$Max.Humidity[ind] <- 100

* dplyr
http://rpubs.com/justmarkham/dplyr-tutorial
5 simple functions
%>% piping operator
tbl_df(hflights) or glimpse(hflights) gives a convenient display
tbl is a superior way and recommended

lut is to create a neat look up table by creating a vector of code
labels

select(flights, Year:DayofMonth, contains("Taxi"),contains("Delay"))
also has 'starts_with', 'ends_with', 'matches'(for regex) for
subsetting with specific columns

mutate() creating a new variable using a function on existing
variables

eg: flights %>% select(Distance, Airtime)%>% mutate(Speed=
Distance/Airtime*60)
remember that mutate doesnt store the variable by default, unless you
assign it.

also one can mutate directly without explicitly selecting
flights %>% mutate(Speed=Distance/Airtime*60)

filter(df,col1==x,col2==y) by specific row values in columns, use
comma or | to add boolean logic

eg flights %>% select(UniqueCarrier,DepDelay)%>% filter(DepDelay >60)

arrange()is to order rows in ascending or descending order
summarise() uses the provided aggregate function to summarise each
group

e. flights%>% group_by(Dest) %>% summarise (avg_delay = mean(ArrDelay,
na.rm = T))

summarise_each or mutate_each performs same summary function on
multiple columns

tally() can replace summarise () used with arrange(desc())
also n() and n_disntinct() does counts

# Both the dplyr and hflights packages are loaded into workspace
lut <- c("AA" = "American", "AS" = "Alaska", "B6" = "JetBlue", "CO" = "Continental", 
         "DL" = "Delta", "OO" = "SkyWest", "UA" = "United", "US" = "US_Airways", 
         "WN" = "Southwest", "EV" = "Atlantic_Southeast", "F9" = "Frontier", 
         "FL" = "AirTran", "MQ" = "American_Eagle", "XE" = "ExpressJet", "YV" = "Mesa")

# Use lut to translate the UniqueCarrier column of hflights
hflights$UniqueCarrier<-lut[hflights$UniqueCarrier]

# Inspect the resulting raw values of your variables
glimpse(hflights)

* windowing and aggregating functions
mean takes n values and returns 1 value , so its a aggregating
function

windowing function takes n values and returns n values, these are
ordering functions or ranking functions

* readr
has read_csv, read_delim and read_tsv functions

* lapply sapply tapply vapply
lapply() gives a list
sapply() is simplify lapply and returns a vector and one doesnt need to unlist lapply result
USE.NAMES is T by default in sapply

vapply() we need to specify the output format. This prevents surpises
when one expects a vector but sapply() provides a list
